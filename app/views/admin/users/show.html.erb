<div class="page-header">
  <h1>Member Details</h1>
</div>

<table class="table table-bordered table-striped">
  <thead>
  <tr>
    <th>#</th>
    <th>Member ID</th>
    <th>Name</th>
    <th>NRIC</th>
    <th>Email</th>
    <th>Contact</th>
    <th>Address</th>
    <th>Sign In Count</th>
    <th>Sign Up Date</th>
    <th>Points</th>
    <th>Actions</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <th scope="row"><%= @user.id %></th>
    <td><%= @user.username %></td>
    <td><%= @user.full_name %></td>
    <td><%= @user.nric %></td>
    <td><%= @user.email %></td>
    <td><%= @user.mobile_number %></td>
    <td><%= simple_format @user.address, {}, { wrapper_tag: 'div' } %></td>
    <td><%= @user.sign_in_count %></td>
    <td><%= @user.created_at.to_formatted_s(:short) %></td>
    <td><%= @user.points %></td>
    <td>
      <%= link_to 'Edit', edit_admin_user_path(@user) %>
    </td>
  </tr>
  </tbody>
</table>

<%#= link_to 'Back', admin_users_path, class: 'btn btn-default' %>

<h2>Team</h2>

<%= "<p>#{@user.full_name} has no recruits yet.</p>".html_safe if @user.children.empty? %>
<p><strong>Team size:</strong> <span id="team-size"></span> members</p>
<script>

    var treeData = <%= raw @team.to_json %>;

    // ************** Generate the tree diagram	 *****************
    var margin = {top: 20, right: 20, bottom: 20, left: 20},
            width = $('.admin-container').width() - margin.right - margin.left,
            height = 900 - margin.top - margin.bottom;

    var i = 0,
            duration = 750,
            root;

    var tree = d3.layout.tree()
            .size([width, height]);

    var diagonal = d3.svg.diagonal()
            .projection(function(d) { return [d.x, d.y]; });

    var svg = d3.select(".admin-container").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    root = treeData[0];
    root.x0 = height / 2;
    root.y0 = 0;

    update(root);

    $('#team-size').html(tree.nodes(root).length-1);

    d3.select(self.frameElement).style("height", "800px");

    function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function(d) { d.y = d.depth * 120; });

        // Update the nodes…
        var node = svg.selectAll("g.node")
                .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter any new nodes at the parent's previous position.
        var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) { return "translate(" + source.x0 + "," + source.y0 + ")"; });

        nodeEnter.append("circle")
                .attr("r", 1e-6)
                .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; })
                .on("click", click)
                .on("mouseenter", mouseenter)
                .on("mouseleave", mouseleave);

        nodeEnter.append("text")
                .attr("y", function(d) {
                    return d.children || d._children ? -15 : 15; })
                .attr("dy", ".35em")
                .attr("text-anchor", "middle")
                .text(function(d) { return d.username; })
                .style("fill-opacity", 1e-6)
                .on("click", gotoPage);

        nodeEnter.append("rect")
                .attr("class", "details")
                .attr("x", 40)
                .attr("y", function(d) {
                    return d.children || d._children ? -30 : -25; })
                .attr("width", 200)
                .attr("height", 70)
                .style("fill", "lightsteelblue")
                .style("display", "none");

        nodeEnter.append("text")
                .attr("class", "details")
                .attr("x", 60)
                .attr("y", 5)
                .attr("text-anchor", "left")
                .text(function(d) { return d.name; })
                .style("display", "none");

        nodeEnter.append("text")
                .attr("class", "details")
                .attr("x", 60)
                .attr("y", 5)
                .attr("dy", "1.5em")
                .attr("text-anchor", "left")
                .text(function(d) { return d.email; })
                .style("display", "none");

        // Transition nodes to their new position.
        var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

        nodeUpdate.select("circle")
                .attr("r", 4.5)
                .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeUpdate.select("text")
                .style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function(d) { return "translate(" + source.x + "," + source.y + ")"; })
                .remove();

        nodeExit.select("circle")
                .attr("r", 1e-6);

        nodeExit.select("text")
                .style("fill-opacity", 1e-6);

        // Update the links…
        var link = svg.selectAll("path.link")
                .data(links, function(d) { return d.target.id; });

        // Enter any new links at the parent's previous position.
        link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", function(d) {
                    var o = {x: source.x0, y: source.y0};
                    return diagonal({source: o, target: o});
                });

        // Transition links to their new position.
        link.transition()
                .duration(duration)
                .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition()
                .duration(duration)
                .attr("d", function(d) {
                    var o = {x: source.x, y: source.y};
                    return diagonal({source: o, target: o});
                })
                .remove();

        // Stash the old positions for transition.
        nodes.forEach(function(d) {
            d.x0 = d.x;
            d.y0 = d.y;
        });
    }

    // Toggle children on click.
    function click(d) {
        if (d.children) {
            d._children = d.children;
            d.children = null;
        } else {
            d.children = d._children;
            d._children = null;
        }
        update(d);
    }

    function mouseenter(d) {
        var details = d3.select(this.parentNode).selectAll(".details");
        details.style("display", "block");
    }

    function mouseleave(d) {
        var details = d3.select(this.parentNode).selectAll(".details");
        details.style("display", "none");
    }

    function gotoPage(d) {
        window.location = d.admin_url;
    }

</script>